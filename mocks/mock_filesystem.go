// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	filesystem "github.com/google/fscrypt/filesystem"
	filesystem0 "github.com/irbekrm/csi-s3/internal/filesystem"
	os "os"
	reflect "reflect"
)

// MockFS is a mock of FS interface
type MockFS struct {
	ctrl     *gomock.Controller
	recorder *MockFSMockRecorder
}

// MockFSMockRecorder is the mock recorder for MockFS
type MockFSMockRecorder struct {
	mock *MockFS
}

// NewMockFS creates a new mock instance
func NewMockFS(ctrl *gomock.Controller) *MockFS {
	mock := &MockFS{ctrl: ctrl}
	mock.recorder = &MockFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFS) EXPECT() *MockFSMockRecorder {
	return m.recorder
}

// FindMount mocks base method
func (m *MockFS) FindMount(arg0 string) (filesystem0.Matcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMount", arg0)
	ret0, _ := ret[0].(filesystem0.Matcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMount indicates an expected call of FindMount
func (mr *MockFSMockRecorder) FindMount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMount", reflect.TypeOf((*MockFS)(nil).FindMount), arg0)
}

// EnsureMountRemoved mocks base method
func (m *MockFS) EnsureMountRemoved(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureMountRemoved", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureMountRemoved indicates an expected call of EnsureMountRemoved
func (mr *MockFSMockRecorder) EnsureMountRemoved(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureMountRemoved", reflect.TypeOf((*MockFS)(nil).EnsureMountRemoved), arg0)
}

// EnsureDirExists mocks base method
func (m *MockFS) EnsureDirExists(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDirExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDirExists indicates an expected call of EnsureDirExists
func (mr *MockFSMockRecorder) EnsureDirExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDirExists", reflect.TypeOf((*MockFS)(nil).EnsureDirExists), arg0)
}

// MockMatcher is a mock of Matcher interface
type MockMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherMockRecorder
}

// MockMatcherMockRecorder is the mock recorder for MockMatcher
type MockMatcherMockRecorder struct {
	mock *MockMatcher
}

// NewMockMatcher creates a new mock instance
func NewMockMatcher(ctrl *gomock.Controller) *MockMatcher {
	mock := &MockMatcher{ctrl: ctrl}
	mock.recorder = &MockMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatcher) EXPECT() *MockMatcherMockRecorder {
	return m.recorder
}

// Match mocks base method
func (m *MockMatcher) Match(arg0 string, arg1 bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match
func (mr *MockMatcherMockRecorder) Match(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockMatcher)(nil).Match), arg0, arg1)
}

// MockSys is a mock of Sys interface
type MockSys struct {
	ctrl     *gomock.Controller
	recorder *MockSysMockRecorder
}

// MockSysMockRecorder is the mock recorder for MockSys
type MockSysMockRecorder struct {
	mock *MockSys
}

// NewMockSys creates a new mock instance
func NewMockSys(ctrl *gomock.Controller) *MockSys {
	mock := &MockSys{ctrl: ctrl}
	mock.recorder = &MockSysMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSys) EXPECT() *MockSysMockRecorder {
	return m.recorder
}

// Stat mocks base method
func (m *MockSys) Stat(arg0 string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MockSysMockRecorder) Stat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockSys)(nil).Stat), arg0)
}

// Unmount mocks base method
func (m *MockSys) Unmount(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount
func (mr *MockSysMockRecorder) Unmount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockSys)(nil).Unmount), arg0)
}

// Remove mocks base method
func (m *MockSys) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockSysMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSys)(nil).Remove), arg0)
}

// GetMount mocks base method
func (m *MockSys) GetMount(arg0 string) (*filesystem.Mount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMount", arg0)
	ret0, _ := ret[0].(*filesystem.Mount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMount indicates an expected call of GetMount
func (mr *MockSysMockRecorder) GetMount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMount", reflect.TypeOf((*MockSys)(nil).GetMount), arg0)
}

// Mkdir mocks base method
func (m *MockSys) Mkdir(arg0 string, arg1 os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir
func (mr *MockSysMockRecorder) Mkdir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockSys)(nil).Mkdir), arg0, arg1)
}

// IsDir mocks base method
func (m *MockSys) IsDir(arg0 os.FileInfo) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir
func (mr *MockSysMockRecorder) IsDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockSys)(nil).IsDir), arg0)
}
